"use strict";const t=Promise,e=globalThis.window,a=clearInterval,s=t=>null==t,n=(t,e,a)=>s(t)?a?.():e(t),r=t=>Array.isArray(t),o=t=>t.length,c=e=>new t(e),i=async e=>t.all(e),l=t=>{throw Error(t)},d=(t,e)=>t.forEach(e),y=(t,e)=>t.map(e),u=(t,...e)=>t.push(...e),g=t=>t.shift(),w=Object,h=t=>w.getPrototypeOf(t),p=w.entries,v=w.keys,b=w.freeze,S=t=>(t=>!s(t)&&n(h(t),(t=>t==w.prototype||s(h(t))),(()=>!0)))(t)&&0==(t=>o(v(t)))(t),A=t=>s(t)||0==(t=>t?.size??0)(t),C=(t,e)=>t?.forEach(e),f=(t,e)=>t?.delete(e),D=t=>new Map(t),L=(t,e)=>t?.get(e),M=(t,e,a)=>s(a)?(f(t,e),t):t?.set(e,a),x=(t,e,a,s)=>{var n,r;return n=t,r=e,n?.has(r)?s?.(L(t,e)):M(t,e,a()),L(t,e)},j=(t,e,a,s,r=0)=>n((a?x:L)(t,e[r],r>o(e)-2?a:D),(n=>{if(r>o(e)-2)return s?.(n)&&M(t,e[r]),n;const c=j(n,e,a,s,r+1);return A(n)&&M(t,e[r]),c})),k=t=>new Set(r(t)||s(t)?t:[t]),P=/^\d+$/,m=D(),E=D(),T=(t,e,a,c,i,y,w,h={},p=0,v=[])=>{let T,B,I,O=0,z=0,$=0;x(m,v,(()=>0)),x(E,v,(()=>[]));const F=D(),[K,N,q,G,H]=((t=1,e,a)=>1!=t&&e.isMergeable()?[1,e.getMergeableContent,()=>e.getTransactionMergeableChanges(!a),([[t],[e]])=>!S(t)||!S(e),e.setDefaultContent]:2!=t?[0,e.getContent,e.getTransactionChanges,([t,e])=>!S(t)||!S(e),e.setContent]:l("Store type not supported by this Persister"))(w,t,p),[J,Q,R]=(()=>{let t;const[e,a]=(()=>{const t=[];let e=0;return[a=>(a?g(t):null)??""+e++,e=>{P.test(e)&&o(t)<1e3&&u(t,e)}]})(),r=D();return[(a,s,n,o=[],c=()=>[])=>{t??=tt;const i=e(1);var l,d;return M(r,i,[a,s,n,o,c]),l=j(s,n??[""],k),d=i,l?.add(d),i},(e,a,...s)=>d(((t,e=[""])=>{const a=[],s=(t,n)=>n==o(e)?u(a,t):null===e[n]?C(t,(t=>s(t,n+1))):d([e[n],null],(e=>s(L(t,e),n+1)));return s(t,0),a})(e,a),(e=>C(e,(e=>L(r,e)[0](t,...a??[],...s))))),t=>n(L(r,t),(([,e,s])=>(j(e,s??[""],void 0,(e=>(f(e,t),A(e)?1:0))),M(r,t),a(t),s))),e=>n(L(r,e),(([e,,a=[],n,r])=>{const c=(...i)=>{const l=o(i);l==o(a)?e(t,...i,...r(i)):s(a[l])?d(n[l]?.(...i)??[],(t=>c(...i,t))):c(...i,a[l])};c()}))]})(),U=t=>{t!=O&&(O=t,Q(F,void 0,O))},V=e=>{(K&&r(e?.[0])?1===e?.[2]?t.applyMergeableChanges:t.setMergeableContent:1===e?.[2]?t.applyChanges:t.setContent)(e)},W=async t=>(2!=O&&(U(1),z++,await _((async()=>{try{const a=await e();r(a)?V(a):t?H(t):l("Content is not an array: "+a)}catch(e){y?.(e),t&&H(t)}U(0)}))),tt),X=()=>(B&&(i(B),B=void 0),tt),Y=async t=>(1!=O&&(U(2),$++,await _((async()=>{try{await a(N,t)}catch(t){y?.(t)}U(0)}))),tt),Z=()=>(I&&(t.delListener(I),I=void 0),tt),_=async(...t)=>(u(L(E,v),...t),await(async()=>{if(!L(m,v)){for(M(m,v,1);!s(T=g(L(E,v)));)try{await T()}catch(t){y?.(t)}M(m,v,0)}})(),tt),tt={load:W,startAutoLoad:async t=>{X(),await W(t);try{B=await c((async(t,e)=>{e||t?2!=O&&(U(1),z++,V(e??t),U(0)):await W()}))}catch(t){y?.(t)}return tt},stopAutoLoad:X,isAutoLoading:()=>!s(B),save:Y,startAutoSave:async()=>(Z(),await Y(),I=t.addDidFinishTransactionListener((()=>{const t=q();G(t)&&Y(t)})),tt),stopAutoSave:Z,isAutoSaving:()=>!s(I),getStatus:()=>O,addStatusListener:t=>J(t,F),delListener:e=>(R(e),t),schedule:_,getStore:()=>t,destroy:()=>(L(E,v).splice(0,void 0),X().stopAutoSave()),getStats:()=>({loads:z,saves:$}),...h};return b(tt)},B=["t","v"],I={keyPath:"k"},O=async(t,e)=>{const a=(e=>y(p(e),(([e,a])=>z(t,"put",{k:e,v:a}))))(e);y(await z(t,"getAllKeys"),(s=>((t,e)=>e in t)(e,s)?0:u(a,z(t,"delete",s)))),await i(a)},z=async(t,e,a)=>c(((s,n)=>{const r=t[e](a);r.onsuccess=()=>s(r.result),r.onerror=()=>n(`objectStore.${e} error`)}));exports.createIndexedDbPersister=(t,s,n=1,r)=>{const o=async(t,a=[],n=0)=>c(((r,o)=>{const c=(e?e.indexedDB:indexedDB).open(s,n?2:void 0);c.onupgradeneeded=()=>n&&y(B,(t=>{try{c.result.createObjectStore(t,I)}catch{}})),c.onsuccess=async()=>{try{const e=c.result.transaction(B,"readwrite"),s=await i(y(B,(async(s,n)=>await t(e.objectStore(s),a[n]))));c.result.close(),r(s)}catch(t){c.result.close(),o(t)}},c.onerror=()=>o("indexedDB.open error")}));return T(t,(async()=>await o((async t=>((t=[])=>w.fromEntries(t))(y(await z(t,"getAll"),(({k:t,v:e})=>[t,e])))))),(async t=>await o((async(t,e)=>await O(t,e)),t(),1)),(t=>setInterval(t,1e3*n)),(t=>a(t)),r,1,{getDbName:()=>s})},exports.objectStoreMatch=O;
